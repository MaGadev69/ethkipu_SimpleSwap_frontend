{
  "language": "Solidity",
  "sources": {
    "contracts/SwapVerifier.sol": {
      "content": "/**\r\n *Submitted for verification at Etherscan.io on 2025-06-19\r\n*/\r\n\r\n/**\r\n *Submitted for verification at Etherscan.io on 2025-06-17\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\n/// @title Interface for SimpleSwap\r\ninterface ISimpleSwap {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 liquidity,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB);\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price);\r\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title SwapVerifier\r\n * @notice Verifies a SimpleSwap implementation by exercising its functions and asserting correct behavior.\r\n */\r\ncontract SwapVerifier {\r\n\r\n    string[] public authors;\r\n\r\n    /// @notice Runs end-to-end checks on a deployed SimpleSwap contract.\r\n    /// @param swapContract Address of the SimpleSwap contract to verify.\r\n    /// @param tokenA Address of a test ERC20 token (must implement IMintableERC20).\r\n    /// @param tokenB Address of a test ERC20 token (must implement IMintableERC20).\r\n    /// @param amountA Initial amount of tokenA to mint and add as liquidity.\r\n    /// @param amountB Initial amount of tokenB to mint and add as liquidity.\r\n    /// @param amountIn Amount of tokenA to swap for tokenB.\r\n    /// @param author Name of the author of swap contract\r\n    function verify(\r\n        address swapContract,\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountA,\r\n        uint256 amountB,\r\n        uint256 amountIn,\r\n        string memory author\r\n    ) external {\r\n        require(amountA > 0 && amountB > 0, \"Invalid liquidity amounts\");\r\n        require(amountIn > 0 && amountIn <= amountA, \"Invalid swap amount\");\r\n        require(IERC20(tokenA).balanceOf(address(this)) >= amountA, \"Insufficient token A supply for this contact\");\r\n        require(IERC20(tokenB).balanceOf(address(this)) >= amountB, \"Insufficient token B supply for this contact\");\r\n\r\n        // Approve SimpleSwap to transfer tokens\r\n        IERC20(tokenA).approve(swapContract, amountA);\r\n        IERC20(tokenB).approve(swapContract, amountB);\r\n\r\n        // Add liquidity\r\n        (uint256 aAdded, uint256 bAdded, uint256 liquidity) = ISimpleSwap(swapContract)\r\n            .addLiquidity(tokenA, tokenB, amountA, amountB, amountA, amountB, address(this), block.timestamp + 1);\r\n        require(aAdded == amountA && bAdded == amountB, \"addLiquidity amounts mismatch\");\r\n        require(liquidity > 0, \"addLiquidity returned zero liquidity\");\r\n\r\n        // Check price = bAdded * 1e18 / aAdded\r\n        uint256 price = ISimpleSwap(swapContract).getPrice(tokenA, tokenB);\r\n        require(price == (bAdded * 1e18) / aAdded, \"getPrice incorrect\");\r\n\r\n        // Compute expected output for swap\r\n        uint256 expectedOut = ISimpleSwap(swapContract).getAmountOut(amountIn, aAdded, bAdded);\r\n        // Perform swap\r\n        IERC20(tokenA).approve(swapContract, amountIn);\r\n        address[] memory path = new address[](2);\r\n        path[0] = tokenA;\r\n        path[1] = tokenB;\r\n        ISimpleSwap(swapContract).swapExactTokensForTokens(amountIn, expectedOut, path, address(this), block.timestamp + 1);\r\n        require(IERC20(tokenB).balanceOf(address(this)) >= expectedOut, \"swapExactTokensForTokens failed\");\r\n\r\n        // Remove liquidity\r\n        (uint256 aOut, uint256 bOut) = ISimpleSwap(swapContract)\r\n            .removeLiquidity(tokenA, tokenB, liquidity, 0, 0, address(this), block.timestamp + 1);\r\n        require(aOut + bOut > 0, \"removeLiquidity returned zero tokens\");\r\n\r\n        // Add author\r\n        authors.push(author);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
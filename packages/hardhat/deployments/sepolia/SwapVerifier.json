{
  "address": "0x402Ab2135d87B5499eDf28B545d6DE7c0c8e650d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "authors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "swapContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "author",
          "type": "string"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfafde94df20c1f917b6f665f49559063735b3f391b7ae9400f37716085d2d2f8",
  "receipt": {
    "to": null,
    "from": "0x4d69441b2b5a9061B2fF5e3F959CBD9C2aAbca08",
    "contractAddress": "0x402Ab2135d87B5499eDf28B545d6DE7c0c8e650d",
    "transactionIndex": 123,
    "gasUsed": "900742",
    "logsBloom": "0x
    "blockHash": "0x9365c9be81e41bbd25475956e9973615d50945a94f259208f7b6492a74c85f57",
    "transactionHash": "0xfafde94df20c1f917b6f665f49559063735b3f391b7ae9400f37716085d2d2f8",
    "logs": [],
    "blockNumber": 8752023,
    "cumulativeGasUsed": "13432852",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4d81cb597d25e6f83d986a60d6785f70",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"authors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"swapContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"author\",\"type\":\"string\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verify(address,address,address,uint256,uint256,uint256,string)\":{\"params\":{\"amountA\":\"Initial amount of tokenA to mint and add as liquidity.\",\"amountB\":\"Initial amount of tokenB to mint and add as liquidity.\",\"amountIn\":\"Amount of tokenA to swap for tokenB.\",\"author\":\"Name of the author of swap contract\",\"swapContract\":\"Address of the SimpleSwap contract to verify.\",\"tokenA\":\"Address of a test ERC20 token (must implement IMintableERC20).\",\"tokenB\":\"Address of a test ERC20 token (must implement IMintableERC20).\"}}},\"title\":\"SwapVerifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"verify(address,address,address,uint256,uint256,uint256,string)\":{\"notice\":\"Runs end-to-end checks on a deployed SimpleSwap contract.\"}},\"notice\":\"Verifies a SimpleSwap implementation by exercising its functions and asserting correct behavior.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SwapVerifier.sol\":\"SwapVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SwapVerifier.sol\":{\"content\":\"/**\\r\\n *Submitted for verification at Etherscan.io on 2025-06-19\\r\\n*/\\r\\n\\r\\n/**\\r\\n *Submitted for verification at Etherscan.io on 2025-06-17\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\n/// @title Interface for SimpleSwap\\r\\ninterface ISimpleSwap {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n\\r\\n    function removeLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 liquidity,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB);\\r\\n\\r\\n    function swapExactTokensForTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n\\r\\n    function getPrice(address tokenA, address tokenB) external view returns (uint256 price);\\r\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SwapVerifier\\r\\n * @notice Verifies a SimpleSwap implementation by exercising its functions and asserting correct behavior.\\r\\n */\\r\\ncontract SwapVerifier {\\r\\n\\r\\n    string[] public authors;\\r\\n\\r\\n    /// @notice Runs end-to-end checks on a deployed SimpleSwap contract.\\r\\n    /// @param swapContract Address of the SimpleSwap contract to verify.\\r\\n    /// @param tokenA Address of a test ERC20 token (must implement IMintableERC20).\\r\\n    /// @param tokenB Address of a test ERC20 token (must implement IMintableERC20).\\r\\n    /// @param amountA Initial amount of tokenA to mint and add as liquidity.\\r\\n    /// @param amountB Initial amount of tokenB to mint and add as liquidity.\\r\\n    /// @param amountIn Amount of tokenA to swap for tokenB.\\r\\n    /// @param author Name of the author of swap contract\\r\\n    function verify(\\r\\n        address swapContract,\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountA,\\r\\n        uint256 amountB,\\r\\n        uint256 amountIn,\\r\\n        string memory author\\r\\n    ) external {\\r\\n        require(amountA > 0 && amountB > 0, \\\"Invalid liquidity amounts\\\");\\r\\n        require(amountIn > 0 && amountIn <= amountA, \\\"Invalid swap amount\\\");\\r\\n        require(IERC20(tokenA).balanceOf(address(this)) >= amountA, \\\"Insufficient token A supply for this contact\\\");\\r\\n        require(IERC20(tokenB).balanceOf(address(this)) >= amountB, \\\"Insufficient token B supply for this contact\\\");\\r\\n\\r\\n        // Approve SimpleSwap to transfer tokens\\r\\n        IERC20(tokenA).approve(swapContract, amountA);\\r\\n        IERC20(tokenB).approve(swapContract, amountB);\\r\\n\\r\\n        // Add liquidity\\r\\n        (uint256 aAdded, uint256 bAdded, uint256 liquidity) = ISimpleSwap(swapContract)\\r\\n            .addLiquidity(tokenA, tokenB, amountA, amountB, amountA, amountB, address(this), block.timestamp + 1);\\r\\n        require(aAdded == amountA && bAdded == amountB, \\\"addLiquidity amounts mismatch\\\");\\r\\n        require(liquidity > 0, \\\"addLiquidity returned zero liquidity\\\");\\r\\n\\r\\n        // Check price = bAdded * 1e18 / aAdded\\r\\n        uint256 price = ISimpleSwap(swapContract).getPrice(tokenA, tokenB);\\r\\n        require(price == (bAdded * 1e18) / aAdded, \\\"getPrice incorrect\\\");\\r\\n\\r\\n        // Compute expected output for swap\\r\\n        uint256 expectedOut = ISimpleSwap(swapContract).getAmountOut(amountIn, aAdded, bAdded);\\r\\n        // Perform swap\\r\\n        IERC20(tokenA).approve(swapContract, amountIn);\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = tokenA;\\r\\n        path[1] = tokenB;\\r\\n        ISimpleSwap(swapContract).swapExactTokensForTokens(amountIn, expectedOut, path, address(this), block.timestamp + 1);\\r\\n        require(IERC20(tokenB).balanceOf(address(this)) >= expectedOut, \\\"swapExactTokensForTokens failed\\\");\\r\\n\\r\\n        // Remove liquidity\\r\\n        (uint256 aOut, uint256 bOut) = ISimpleSwap(swapContract)\\r\\n            .removeLiquidity(tokenA, tokenB, liquidity, 0, 0, address(this), block.timestamp + 1);\\r\\n        require(aOut + bOut > 0, \\\"removeLiquidity returned zero tokens\\\");\\r\\n\\r\\n        // Add author\\r\\n        authors.push(author);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x7c06fee20f416cea27c266b082555faa9fc8d12a67943ee716169d3809c7321c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50610f558061001f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80633db804da1461003b578063457b8b9114610064575b600080fd5b61004e610049366004610ab2565b610079565b60405161005b9190610acb565b60405180910390f35b610077610072366004610b4b565b610125565b005b6000818154811061008957600080fd5b9060005260206000200160009150905080546100a490610c53565b80601f01602080910402602001604051908101604052809291908181526020018280546100d090610c53565b801561011d5780601f106100f25761010080835404028352916020019161011d565b820191906000526020600020905b81548152906001019060200180831161010057829003601f168201915b505050505081565b6000841180156101355750600083115b6101865760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206c697175696469747920616d6f756e74730000000000000060448201526064015b60405180910390fd5b6000821180156101965750838211155b6101d85760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081cddd85c08185b5bdd5b9d606a1b604482015260640161017d565b6040516370a0823160e01b815230600482015284906001600160a01b038816906370a0823190602401602060405180830381865afa15801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610c8d565b10156102a55760405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e7420746f6b656e204120737570706c7920666f722060448201526b1d1a1a5cc818dbdb9d1858dd60a21b606482015260840161017d565b6040516370a0823160e01b815230600482015283906001600160a01b038716906370a0823190602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610c8d565b10156103725760405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e7420746f6b656e204220737570706c7920666f722060448201526b1d1a1a5cc818dbdb9d1858dd60a21b606482015260840161017d565b60405163095ea7b360e01b81526001600160a01b0388811660048301526024820186905287169063095ea7b3906044016020604051808303816000875af11580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190610ca6565b5060405163095ea7b360e01b81526001600160a01b0388811660048301526024820185905286169063095ea7b3906044016020604051808303816000875af1158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190610ca6565b50600080806001600160a01b038a1663e8e337008a8a8a8a81813061047f426001610ce5565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af11580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f9190610cfe565b925092509250868314801561053357508582145b61057f5760405162461bcd60e51b815260206004820152601d60248201527f6164644c697175696469747920616d6f756e7473206d69736d61746368000000604482015260640161017d565b600081116105db5760405162461bcd60e51b8152602060048201526024808201527f6164644c69717569646974792072657475726e6564207a65726f206c697175696044820152636469747960e01b606482015260840161017d565b604051635620c32d60e11b81526001600160a01b038a811660048301528981166024830152600091908c169063ac41865a90604401602060405180830381865afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190610c8d565b90508361066684670de0b6b3a7640000610d2c565b6106709190610d43565b81146106b35760405162461bcd60e51b815260206004820152601260248201527119d95d141c9a58d9481a5b98dbdc9c9958dd60721b604482015260640161017d565b604051630153543560e21b81526004810187905260248101859052604481018490526000906001600160a01b038d169063054d50d490606401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610c8d565b60405163095ea7b360e01b81526001600160a01b038e81166004830152602482018a9052919250908c169063095ea7b3906044016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190610ca6565b506040805160028082526060820183526000926020830190803683370190505090508b816000815181106107da576107da610d65565b60200260200101906001600160a01b031690816001600160a01b0316815250508a8160018151811061080e5761080e610d65565b6001600160a01b0392831660209182029290920101528d166338ed17398984843061083a426001610ce5565b6040518663ffffffff1660e01b815260040161085a959493929190610d7b565b600060405180830381600087803b15801561087457600080fd5b505af1158015610888573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528492506001600160a01b038e1691506370a0823190602401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610c8d565b10156109445760405162461bcd60e51b815260206004820152601f60248201527f737761704578616374546f6b656e73466f72546f6b656e73206661696c656400604482015260640161017d565b6000806001600160a01b038f1663baa2abde8f8f89858030610967426001610ce5565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e40160408051808303816000875af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190610ded565b90925090506000610a0e8284610ce5565b11610a675760405162461bcd60e51b8152602060048201526024808201527f72656d6f76654c69717569646974792072657475726e6564207a65726f20746f6044820152636b656e7360e01b606482015260840161017d565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301610aa08a82610e60565b50505050505050505050505050505050565b600060208284031215610ac457600080fd5b5035919050565b602081526000825180602084015260005b81811015610af95760208186018101516040868401015201610adc565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610b3057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215610b6657600080fd5b610b6f88610b19565b9650610b7d60208901610b19565b9550610b8b60408901610b19565b9450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff811115610bbc57600080fd5b8801601f81018a13610bcd57600080fd5b803567ffffffffffffffff811115610be757610be7610b35565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610c1657610c16610b35565b6040528181528282016020018c1015610c2e57600080fd5b8160208401602083013760006020838301015280935050505092959891949750929550565b600181811c90821680610c6757607f821691505b602082108103610c8757634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610c9f57600080fd5b5051919050565b600060208284031215610cb857600080fd5b81518015158114610cc857600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610cf857610cf8610ccf565b92915050565b600080600060608486031215610d1357600080fd5b5050815160208301516040909301519094929350919050565b8082028115828204841417610cf857610cf8610ccf565b600082610d6057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b81811015610dcd5783516001600160a01b0316835260209384019390920191600101610da6565b50506001600160a01b039590951660608401525050608001529392505050565b60008060408385031215610e0057600080fd5b505080516020909101519092909150565b601f821115610e5b57806000526020600020601f840160051c81016020851015610e385750805b601f840160051c820191505b81811015610e585760008155600101610e44565b50505b505050565b815167ffffffffffffffff811115610e7a57610e7a610b35565b610e8e81610e888454610c53565b84610e11565b6020601f821160018114610ec25760008315610eaa5750848201515b600019600385901b1c1916600184901b178455610e58565b600084815260208120601f198516915b82811015610ef25787850151825560209485019460019092019101610ed2565b5084821015610f105786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea264697066735822122053be54c6e666576b1e965c203116812e36440c3223ae3ed011b248011802a89d64736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80633db804da1461003b578063457b8b9114610064575b600080fd5b61004e610049366004610ab2565b610079565b60405161005b9190610acb565b60405180910390f35b610077610072366004610b4b565b610125565b005b6000818154811061008957600080fd5b9060005260206000200160009150905080546100a490610c53565b80601f01602080910402602001604051908101604052809291908181526020018280546100d090610c53565b801561011d5780601f106100f25761010080835404028352916020019161011d565b820191906000526020600020905b81548152906001019060200180831161010057829003601f168201915b505050505081565b6000841180156101355750600083115b6101865760405162461bcd60e51b815260206004820152601960248201527f496e76616c6964206c697175696469747920616d6f756e74730000000000000060448201526064015b60405180910390fd5b6000821180156101965750838211155b6101d85760405162461bcd60e51b8152602060048201526013602482015272125b9d985b1a59081cddd85c08185b5bdd5b9d606a1b604482015260640161017d565b6040516370a0823160e01b815230600482015284906001600160a01b038816906370a0823190602401602060405180830381865afa15801561021e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102429190610c8d565b10156102a55760405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e7420746f6b656e204120737570706c7920666f722060448201526b1d1a1a5cc818dbdb9d1858dd60a21b606482015260840161017d565b6040516370a0823160e01b815230600482015283906001600160a01b038716906370a0823190602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190610c8d565b10156103725760405162461bcd60e51b815260206004820152602c60248201527f496e73756666696369656e7420746f6b656e204220737570706c7920666f722060448201526b1d1a1a5cc818dbdb9d1858dd60a21b606482015260840161017d565b60405163095ea7b360e01b81526001600160a01b0388811660048301526024820186905287169063095ea7b3906044016020604051808303816000875af11580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190610ca6565b5060405163095ea7b360e01b81526001600160a01b0388811660048301526024820185905286169063095ea7b3906044016020604051808303816000875af1158015610435573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104599190610ca6565b50600080806001600160a01b038a1663e8e337008a8a8a8a81813061047f426001610ce5565b60405160e08a901b6001600160e01b03191681526001600160a01b039889166004820152968816602488015260448701959095526064860193909352608485019190915260a484015290921660c482015260e4810191909152610104016060604051808303816000875af11580156104fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051f9190610cfe565b925092509250868314801561053357508582145b61057f5760405162461bcd60e51b815260206004820152601d60248201527f6164644c697175696469747920616d6f756e7473206d69736d61746368000000604482015260640161017d565b600081116105db5760405162461bcd60e51b8152602060048201526024808201527f6164644c69717569646974792072657475726e6564207a65726f206c697175696044820152636469747960e01b606482015260840161017d565b604051635620c32d60e11b81526001600160a01b038a811660048301528981166024830152600091908c169063ac41865a90604401602060405180830381865afa15801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190610c8d565b90508361066684670de0b6b3a7640000610d2c565b6106709190610d43565b81146106b35760405162461bcd60e51b815260206004820152601260248201527119d95d141c9a58d9481a5b98dbdc9c9958dd60721b604482015260640161017d565b604051630153543560e21b81526004810187905260248101859052604481018490526000906001600160a01b038d169063054d50d490606401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190610c8d565b60405163095ea7b360e01b81526001600160a01b038e81166004830152602482018a9052919250908c169063095ea7b3906044016020604051808303816000875af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190610ca6565b506040805160028082526060820183526000926020830190803683370190505090508b816000815181106107da576107da610d65565b60200260200101906001600160a01b031690816001600160a01b0316815250508a8160018151811061080e5761080e610d65565b6001600160a01b0392831660209182029290920101528d166338ed17398984843061083a426001610ce5565b6040518663ffffffff1660e01b815260040161085a959493929190610d7b565b600060405180830381600087803b15801561087457600080fd5b505af1158015610888573d6000803e3d6000fd5b50506040516370a0823160e01b81523060048201528492506001600160a01b038e1691506370a0823190602401602060405180830381865afa1580156108d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f69190610c8d565b10156109445760405162461bcd60e51b815260206004820152601f60248201527f737761704578616374546f6b656e73466f72546f6b656e73206661696c656400604482015260640161017d565b6000806001600160a01b038f1663baa2abde8f8f89858030610967426001610ce5565b60405160e089901b6001600160e01b03191681526001600160a01b039788166004820152958716602487015260448601949094526064850192909252608484015290921660a482015260c481019190915260e40160408051808303816000875af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190610ded565b90925090506000610a0e8284610ce5565b11610a675760405162461bcd60e51b8152602060048201526024808201527f72656d6f76654c69717569646974792072657475726e6564207a65726f20746f6044820152636b656e7360e01b606482015260840161017d565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301610aa08a82610e60565b50505050505050505050505050505050565b600060208284031215610ac457600080fd5b5035919050565b602081526000825180602084015260005b81811015610af95760208186018101516040868401015201610adc565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610b3057600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600080600060e0888a031215610b6657600080fd5b610b6f88610b19565b9650610b7d60208901610b19565b9550610b8b60408901610b19565b9450606088013593506080880135925060a0880135915060c088013567ffffffffffffffff811115610bbc57600080fd5b8801601f81018a13610bcd57600080fd5b803567ffffffffffffffff811115610be757610be7610b35565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610c1657610c16610b35565b6040528181528282016020018c1015610c2e57600080fd5b8160208401602083013760006020838301015280935050505092959891949750929550565b600181811c90821680610c6757607f821691505b602082108103610c8757634e487b7160e01b600052602260045260246000fd5b50919050565b600060208284031215610c9f57600080fd5b5051919050565b600060208284031215610cb857600080fd5b81518015158114610cc857600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610cf857610cf8610ccf565b92915050565b600080600060608486031215610d1357600080fd5b5050815160208301516040909301519094929350919050565b8082028115828204841417610cf857610cf8610ccf565b600082610d6057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a0820187835286602084015260a0604084015280865180835260c08501915060208801925060005b81811015610dcd5783516001600160a01b0316835260209384019390920191600101610da6565b50506001600160a01b039590951660608401525050608001529392505050565b60008060408385031215610e0057600080fd5b505080516020909101519092909150565b601f821115610e5b57806000526020600020601f840160051c81016020851015610e385750805b601f840160051c820191505b81811015610e585760008155600101610e44565b50505b505050565b815167ffffffffffffffff811115610e7a57610e7a610b35565b610e8e81610e888454610c53565b84610e11565b6020601f821160018114610ec25760008315610eaa5750848201515b600019600385901b1c1916600184901b178455610e58565b600084815260208120601f198516915b82811015610ef25787850151825560209485019460019092019101610ed2565b5084821015610f105786840151600019600387901b60f8161c191681555b50505050600190811b0190555056fea264697066735822122053be54c6e666576b1e965c203116812e36440c3223ae3ed011b248011802a89d64736f6c634300081b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verify(address,address,address,uint256,uint256,uint256,string)": {
        "params": {
          "amountA": "Initial amount of tokenA to mint and add as liquidity.",
          "amountB": "Initial amount of tokenB to mint and add as liquidity.",
          "amountIn": "Amount of tokenA to swap for tokenB.",
          "author": "Name of the author of swap contract",
          "swapContract": "Address of the SimpleSwap contract to verify.",
          "tokenA": "Address of a test ERC20 token (must implement IMintableERC20).",
          "tokenB": "Address of a test ERC20 token (must implement IMintableERC20)."
        }
      }
    },
    "title": "SwapVerifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "verify(address,address,address,uint256,uint256,uint256,string)": {
        "notice": "Runs end-to-end checks on a deployed SimpleSwap contract."
      }
    },
    "notice": "Verifies a SimpleSwap implementation by exercising its functions and asserting correct behavior.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 162,
        "contract": "contracts/SwapVerifier.sol:SwapVerifier",
        "label": "authors",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_string_storage)dyn_storage"
      }
    ],
    "types": {
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}
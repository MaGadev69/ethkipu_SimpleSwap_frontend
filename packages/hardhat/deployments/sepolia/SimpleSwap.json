{
  "address": "0x4251C346a0007e9c878c0A194aa091a468327ca0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveOut",
          "type": "uint256"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenA",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenB",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x030bb24bc684202c7480a6d23746f88c4eaddb63980543a7f13f1a2a9c487d08",
  "receipt": {
    "to": null,
    "from": "0x4d69441b2b5a9061B2fF5e3F959CBD9C2aAbca08",
    "contractAddress": "0x4251C346a0007e9c878c0A194aa091a468327ca0",
    "transactionIndex": 121,
    "gasUsed": "1482752",
    "logsBloom": "0x
    "blockHash": "0x15f72e21b1dc8281fe92876521155fbe890c95a276632ed52bf3e449677c6633",
    "transactionHash": "0x030bb24bc684202c7480a6d23746f88c4eaddb63980543a7f13f1a2a9c487d08",
    "logs": [],
    "blockNumber": 8730222,
    "cumulativeGasUsed": "15595682",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f2162aa950088d97b60da5376d1f6e7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenA\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenB\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Gasquez_Jonatan\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"details\":\"If the pool is empty, the initial token ratio is set. Otherwise, liquidity is added based on the existing ratio. Mints LP tokens to the provider.\",\"params\":{\"_tokenA\":\"The address of tokenA.\",\"_tokenB\":\"The address of tokenB.\",\"amountADesired\":\"The amount of tokenA the user wishes to add.\",\"amountAMin\":\"The minimum amount of tokenA to add, for slippage protection.\",\"amountBDesired\":\"The amount of tokenB the user wishes to add.\",\"amountBMin\":\"The minimum amount of tokenB to add, for slippage protection.\",\"deadline\":\"The timestamp after which the transaction will be reverted.\",\"to\":\"The address that will receive the LP tokens.\"},\"returns\":{\"amountA\":\"The actual amount of tokenA added.\",\"amountB\":\"The actual amount of tokenB added.\",\"liquidity\":\"The amount of LP tokens minted.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"details\":\"Applies a 0.3% fee to the input amount before calculation.\",\"params\":{\"_reserveIn\":\"The reserve of the input token in the pool.\",\"_reserveOut\":\"The reserve of the output token in the pool.\",\"amountIn\":\"The amount of the input token.\"},\"returns\":{\"amountOut\":\"The calculated amount of the output token.\"}},\"getPrice(address,address)\":{\"params\":{\"_tokenA\":\"The address of tokenA.\",\"_tokenB\":\"The address of tokenB.\"},\"returns\":{\"price\":\"The price of tokenA denominated in tokenB, scaled by 1e18.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"details\":\"Burns the user's LP tokens and sends them a proportional amount of tokenA and tokenB from the reserves.\",\"params\":{\"_tokenA\":\"The address of tokenA.\",\"_tokenB\":\"The address of tokenB.\",\"amountAMin\":\"The minimum amount of tokenA to receive, for slippage protection.\",\"amountBMin\":\"The minimum amount of tokenB to receive, for slippage protection.\",\"deadline\":\"The timestamp after which the transaction will be reverted.\",\"liquidity\":\"The amount of LP tokens to burn.\",\"to\":\"The address that will receive the underlying tokens.\"},\"returns\":{\"amountA\":\"The actual amount of tokenA sent to the user.\",\"amountB\":\"The actual amount of tokenB sent to the user.\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"amountIn\":\"The exact amount of the input token to send.\",\"amountOutMin\":\"The minimum amount of the output token to receive, for slippage protection.\",\"deadline\":\"The timestamp after which the transaction will be reverted.\",\"path\":\"An array of token addresses representing the swap route. Must be 2 addresses.\",\"to\":\"The address that will receive the output tokens.\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"title\":\"SimpleSwap\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Adds liquidity to the pool for a pair of tokens.\"},\"constructor\":{\"notice\":\"Initializes the contract, setting the name and symbol for the LP token.\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates the amount of an output token to receive for a given amount of an input token.\"},\"getPrice(address,address)\":{\"notice\":\"Calculates the price of tokenA in terms of tokenB.\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from the pool.\"},\"reserveA()\":{\"notice\":\"The total reserve of tokenA held by this contract.\"},\"reserveB()\":{\"notice\":\"The total reserve of tokenB held by this contract.\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of an input token for as much as possible of an output token.\"},\"tokenA()\":{\"notice\":\"The address of the first token in the liquidity pool.\"},\"tokenB()\":{\"notice\":\"The address of the second token in the liquidity pool.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/SimpleSwap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\npragma solidity ^0.8.27;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title SimpleSwap\\n * @author Gasquez_Jonatan\\n */\\ncontract SimpleSwap is ERC20 {\\n    /// @notice The address of the first token in the liquidity pool.\\n    IERC20 public tokenA;\\n    /// @notice The address of the second token in the liquidity pool.\\n    IERC20 public tokenB;\\n\\n    /// @notice The total reserve of tokenA held by this contract.\\n    uint256 public reserveA;\\n    /// @notice The total reserve of tokenB held by this contract.\\n    uint256 public reserveB;\\n\\n    /// @notice Initializes the contract, setting the name and symbol for the LP token.\\n    constructor() ERC20(\\\"SimpleSwap LP\\\", \\\"SSLP\\\") {}\\n\\n    /**\\n     * @notice Adds liquidity to the pool for a pair of tokens.\\n     * @dev If the pool is empty, the initial token ratio is set. Otherwise, liquidity is added based on the existing ratio. Mints LP tokens to the provider.\\n     * @param _tokenA The address of tokenA.\\n     * @param _tokenB The address of tokenB.\\n     * @param amountADesired The amount of tokenA the user wishes to add.\\n     * @param amountBDesired The amount of tokenB the user wishes to add.\\n     * @param amountAMin The minimum amount of tokenA to add, for slippage protection.\\n     * @param amountBMin The minimum amount of tokenB to add, for slippage protection.\\n     * @param to The address that will receive the LP tokens.\\n     * @param deadline The timestamp after which the transaction will be reverted.\\n     * @return amountA The actual amount of tokenA added.\\n     * @return amountB The actual amount of tokenB added.\\n     * @return liquidity The amount of LP tokens minted.\\n     */\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity) {\\n        require(deadline >= block.timestamp, \\\"SimpleSwap: EXPIRED\\\");\\n\\n        if (address(tokenA) == address(0) && address(tokenB) == address(0)) {\\n            tokenA = IERC20(_tokenA);\\n            tokenB = IERC20(_tokenB);\\n        }\\n\\n        require(\\n            _tokenA == address(tokenA) && _tokenB == address(tokenB),\\n            \\\"SimpleSwap: INVALID_TOKENS\\\"\\n        );\\n\\n        (uint256 _reserveA, uint256 _reserveB) = (reserveA, reserveB);\\n\\n        if (_reserveA == 0 && _reserveB == 0) {\\n            amountA = amountADesired;\\n            amountB = amountBDesired;\\n        } else {\\n            uint256 amountBOptimal = (amountADesired * _reserveB) / _reserveA;\\n            if (amountBOptimal <= amountBDesired) {\\n                require(\\n                    amountBOptimal >= amountBMin,\\n                    \\\"SimpleSwap: INSUFFICIENT_B_AMOUNT\\\"\\n                );\\n                amountA = amountADesired;\\n                amountB = amountBOptimal;\\n            } else {\\n                uint256 amountAOptimal = (amountBDesired * _reserveA) / _reserveB;\\n                require(\\n                    amountAOptimal >= amountAMin,\\n                    \\\"SimpleSwap: INSUFFICIENT_A_AMOUNT\\\"\\n                );\\n                amountA = amountAOptimal;\\n                amountB = amountBDesired;\\n            }\\n        }\\n\\n        tokenA.transferFrom(msg.sender, address(this), amountA);\\n        tokenB.transferFrom(msg.sender, address(this), amountB);\\n\\n        reserveA += amountA;\\n        reserveB += amountB;\\n\\n        uint256 _totalSupply = totalSupply();\\n        if (_totalSupply == 0) {\\n            liquidity = sqrt(amountA * amountB);\\n        } else {\\n            liquidity = min(\\n                (amountA * _totalSupply) / _reserveA,\\n                (amountB * _totalSupply) / _reserveB\\n            );\\n        }\\n\\n        require(liquidity > 0, \\\"SimpleSwap: INSUFFICIENT_LIQUIDITY_MINTED\\\");\\n        _mint(to, liquidity);\\n    }\\n\\n    /// @dev Internal function to calculate the square root of a number.\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    /// @dev Internal function to find the minimum of two numbers.\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @notice Removes liquidity from the pool.\\n     * @dev Burns the user's LP tokens and sends them a proportional amount of tokenA and tokenB from the reserves.\\n     * @param _tokenA The address of tokenA.\\n     * @param _tokenB The address of tokenB.\\n     * @param liquidity The amount of LP tokens to burn.\\n     * @param amountAMin The minimum amount of tokenA to receive, for slippage protection.\\n     * @param amountBMin The minimum amount of tokenB to receive, for slippage protection.\\n     * @param to The address that will receive the underlying tokens.\\n     * @param deadline The timestamp after which the transaction will be reverted.\\n     * @return amountA The actual amount of tokenA sent to the user.\\n     * @return amountB The actual amount of tokenB sent to the user.\\n     */\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB) {\\n        require(deadline >= block.timestamp, \\\"SimpleSwap: EXPIRED\\\");\\n        require(\\n            _tokenA == address(tokenA) && _tokenB == address(tokenB),\\n            \\\"SimpleSwap: INVALID_TOKENS\\\"\\n        );\\n        require(balanceOf(msg.sender) >= liquidity, \\\"SimpleSwap: INSUFFICIENT_LP_TOKEN_BURNED\\\");\\n\\n        (uint256 _reserveA, uint256 _reserveB, uint256 _totalSupply) = (reserveA, reserveB, totalSupply());\\n\\n        amountA = (liquidity * _reserveA) / _totalSupply;\\n        amountB = (liquidity * _reserveB) / _totalSupply;\\n\\n        require(amountA >= amountAMin, \\\"SimpleSwap: INSUFFICIENT_A_AMOUNT\\\");\\n        require(amountB >= amountBMin, \\\"SimpleSwap: INSUFFICIENT_B_AMOUNT\\\");\\n\\n        _burn(msg.sender, liquidity);\\n\\n        reserveA -= amountA;\\n        reserveB -= amountB;\\n\\n        tokenA.transfer(to, amountA);\\n        tokenB.transfer(to, amountB);\\n    }\\n\\n    /**\\n     * @notice Swaps an exact amount of an input token for as much as possible of an output token.\\n     * @param amountIn The exact amount of the input token to send.\\n     * @param amountOutMin The minimum amount of the output token to receive, for slippage protection.\\n     * @param path An array of token addresses representing the swap route. Must be 2 addresses.\\n     * @param to The address that will receive the output tokens.\\n     * @param deadline The timestamp after which the transaction will be reverted.\\n     */\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"SimpleSwap: EXPIRED\\\");\\n        require(path.length == 2, \\\"SimpleSwap: INVALID_PATH\\\");\\n        require(\\n            (path[0] == address(tokenA) && path[1] == address(tokenB)) ||\\n                (path[0] == address(tokenB) && path[1] == address(tokenA)),\\n            \\\"SimpleSwap: INVALID_PATH\\\"\\n        );\\n\\n        (uint256 _reserveIn, uint256 _reserveOut) = (path[0] == address(tokenA))\\n            ? (reserveA, reserveB)\\n            : (reserveB, reserveA);\\n\\n        uint256 amountOut = getAmountOut(amountIn, _reserveIn, _reserveOut);\\n        require(amountOut >= amountOutMin, \\\"SimpleSwap: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\n        IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\\n\\n        if (path[0] == address(tokenA)) {\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n\\n        IERC20(path[1]).transfer(to, amountOut);\\n    }\\n\\n    /**\\n     * @notice Calculates the amount of an output token to receive for a given amount of an input token.\\n     * @dev Applies a 0.3% fee to the input amount before calculation.\\n     * @param amountIn The amount of the input token.\\n     * @param _reserveIn The reserve of the input token in the pool.\\n     * @param _reserveOut The reserve of the output token in the pool.\\n     * @return amountOut The calculated amount of the output token.\\n     */\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 _reserveIn,\\n        uint256 _reserveOut\\n    ) public pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"SimpleSwap: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(_reserveIn > 0 && _reserveOut > 0, \\\"SimpleSwap: INSUFFICIENT_LIQUIDITY\\\");\\n\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * _reserveOut;\\n        uint256 denominator = (_reserveIn * 1000) + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Calculates the price of tokenA in terms of tokenB.\\n     * @param _tokenA The address of tokenA.\\n     * @param _tokenB The address of tokenB.\\n     * @return price The price of tokenA denominated in tokenB, scaled by 1e18.\\n     */\\n    function getPrice(\\n        address _tokenA,\\n        address _tokenB\\n    ) external view returns (uint256 price) {\\n        require(\\n            _tokenA == address(tokenA) && _tokenB == address(tokenB),\\n            \\\"SimpleSwap: INVALID_TOKENS\\\"\\n        );\\n        require(reserveA > 0, \\\"SimpleSwap: INVALID_RESERVE\\\");\\n        return (reserveB * 1e18) / reserveA;\\n    }\\n}\\n\",\"keccak256\":\"0x1d9f49951ad270eef2704b1293162be1623530a71668a8ad3089298376180d34\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040518060400160405280600d81526020016c053696d706c6553776170204c5609c1b81525060405180604001604052806004815260200163053534c560e41b81525081600390816100639190610117565b5060046100708282610117565b5050506101d5565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806100a257607f821691505b6020821081036100c257634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561011257806000526020600020601f840160051c810160208510156100ef5750805b601f840160051c820191505b8181101561010f57600081556001016100fb565b50505b505050565b81516001600160401b0381111561013057610130610078565b6101448161013e845461008e565b846100c8565b6020601f82116001811461017857600083156101605750848201515b600019600385901b1c1916600184901b17845561010f565b600084815260208120601f198516915b828110156101a85787850151825560209485019460019092019101610188565b50848210156101c65786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b6118e8806101e46000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80635f64b55b116100a2578063ac41865a11610071578063ac41865a14610243578063baa2abde14610256578063dc5fa6c51461027e578063dd62ed3e14610287578063e8e33700146102c057600080fd5b80635f64b55b146101ec57806370a08231146101ff57806395d89b4114610228578063a9059cbb1461023057600080fd5b806318160ddd116100e957806318160ddd146101a457806319e36f3b146101ac57806323b872dd146101b5578063313ce567146101c857806338ed1739146101d757600080fd5b8063054d50d41461011b57806306fdde0314610141578063095ea7b3146101565780630fc63d1014610179575b600080fd5b61012e61012936600461141c565b6102ee565b6040519081526020015b60405180910390f35b610149610407565b6040516101389190611448565b6101696101643660046114ad565b610499565b6040519015158152602001610138565b60055461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60025461012e565b61012e60085481565b6101696101c33660046114d7565b6104b3565b60405160128152602001610138565b6101ea6101e5366004611514565b6104d7565b005b60065461018c906001600160a01b031681565b61012e61020d3660046115ba565b6001600160a01b031660009081526020819052604090205490565b61014961094d565b61016961023e3660046114ad565b61095c565b61012e6102513660046115d5565b61096a565b610269610264366004611608565b610a2e565b60408051928352602083019190915201610138565b61012e60075481565b61012e6102953660046115d5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102d36102ce366004611675565b610cc9565b60408051938452602084019290925290820152606001610138565b60008084116103525760405162461bcd60e51b815260206004820152602560248201527f53696d706c65537761703a20494e53554646494349454e545f494e5055545f416044820152641353d5539560da1b60648201526084015b60405180910390fd5b6000831180156103625750600082115b6103b95760405162461bcd60e51b815260206004820152602260248201527f53696d706c65537761703a20494e53554646494349454e545f4c495155494449604482015261545960f01b6064820152608401610349565b60006103c7856103e5611701565b905060006103d58483611701565b90506000826103e6876103e8611701565b6103f09190611718565b90506103fc818361172b565b979650505050505050565b6060600380546104169061174d565b80601f01602080910402602001604051908101604052809291908181526020018280546104429061174d565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b5050505050905090565b6000336104a7818585611038565b60019150505b92915050565b6000336104c185828561104a565b6104cc8585856110c8565b506001949350505050565b428110156104f75760405162461bcd60e51b815260040161034990611781565b600283146105425760405162461bcd60e51b81526020600482015260186024820152770a6d2dae0d8caa6eec2e07440929cac82989288bea082a8960431b6044820152606401610349565b6005546001600160a01b0316848460008161055f5761055f6117ae565b905060200201602081019061057491906115ba565b6001600160a01b03161480156105c457506006546001600160a01b0316848460018181106105a4576105a46117ae565b90506020020160208101906105b991906115ba565b6001600160a01b0316145b8061064c57506006546001600160a01b031684846000816105e7576105e76117ae565b90506020020160208101906105fc91906115ba565b6001600160a01b031614801561064c57506005546001600160a01b03168484600181811061062c5761062c6117ae565b905060200201602081019061064191906115ba565b6001600160a01b0316145b6106935760405162461bcd60e51b81526020600482015260186024820152770a6d2dae0d8caa6eec2e07440929cac82989288bea082a8960431b6044820152606401610349565b60055460009081906001600160a01b0316868683816106b4576106b46117ae565b90506020020160208101906106c991906115ba565b6001600160a01b0316146106e2576008546007546106e9565b6007546008545b9150915060006106fa8984846102ee565b90508781101561075b5760405162461bcd60e51b815260206004820152602660248201527f53696d706c65537761703a20494e53554646494349454e545f4f55545055545f604482015265105353d5539560d21b6064820152608401610349565b8686600081811061076e5761076e6117ae565b905060200201602081019061078391906115ba565b6040516323b872dd60e01b8152336004820152306024820152604481018b90526001600160a01b0391909116906323b872dd906064016020604051808303816000875af11580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc91906117c4565b506005546001600160a01b0316878760008161081a5761081a6117ae565b905060200201602081019061082f91906115ba565b6001600160a01b03160361087357886007600082825461084f9190611718565b92505081905550806008600082825461086891906117e6565b909155506108a49050565b88600860008282546108859190611718565b92505081905550806007600082825461089e91906117e6565b90915550505b868660018181106108b7576108b76117ae565b90506020020160208101906108cc91906115ba565b60405163a9059cbb60e01b81526001600160a01b03878116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af115801561091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906117c4565b50505050505050505050565b6060600480546104169061174d565b6000336104a78185856110c8565b6005546000906001600160a01b03848116911614801561099757506006546001600160a01b038381169116145b6109b35760405162461bcd60e51b8152600401610349906117f9565b600060075411610a055760405162461bcd60e51b815260206004820152601b60248201527f53696d706c65537761703a20494e56414c49445f5245534552564500000000006044820152606401610349565b600754600854610a1d90670de0b6b3a7640000611701565b610a27919061172b565b9392505050565b60008042831015610a515760405162461bcd60e51b815260040161034990611781565b6005546001600160a01b038a81169116148015610a7b57506006546001600160a01b038981169116145b610a975760405162461bcd60e51b8152600401610349906117f9565b33600090815260208190526040902054871115610b075760405162461bcd60e51b815260206004820152602860248201527f53696d706c65537761703a20494e53554646494349454e545f4c505f544f4b456044820152671397d0955493915160c21b6064820152608401610349565b6000806000600754600854610b1b60025490565b9194509250905080610b2d848c611701565b610b37919061172b565b945080610b44838c611701565b610b4e919061172b565b935088851015610b705760405162461bcd60e51b815260040161034990611830565b87841015610b905760405162461bcd60e51b815260040161034990611871565b610b9a338b611127565b8460076000828254610bac91906117e6565b925050819055508360086000828254610bc591906117e6565b909155505060055460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af1158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4191906117c4565b5060065460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb991906117c4565b5050505097509795505050505050565b600080600042841015610cee5760405162461bcd60e51b815260040161034990611781565b6005546001600160a01b0316158015610d1057506006546001600160a01b0316155b15610d4657600580546001600160a01b03808e166001600160a01b03199283161790925560068054928d16929091169190911790555b6005546001600160a01b038c81169116148015610d7057506006546001600160a01b038b81169116145b610d8c5760405162461bcd60e51b8152600401610349906117f9565b60075460085481158015610d9e575080155b15610dae578a9450899350610e3a565b600082610dbb838e611701565b610dc5919061172b565b90508a8111610df95788811015610dee5760405162461bcd60e51b815260040161034990611871565b8b9550809450610e38565b600082610e06858e611701565b610e10919061172b565b90508a811015610e325760405162461bcd60e51b815260040161034990611830565b95508a94505b505b6005546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb591906117c4565b506006546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906117c4565b508460076000828254610f449190611718565b925050819055508360086000828254610f5d9190611718565b909155505060025480600003610f8657610f7f610f7a8688611701565b611161565b9350610fbb565b610fb883610f948389611701565b610f9e919061172b565b83610fa98489611701565b610fb3919061172b565b6111d1565b93505b6000841161101d5760405162461bcd60e51b815260206004820152602960248201527f53696d706c65537761703a20494e53554646494349454e545f4c495155494449604482015268151657d3525395115160ba1b6064820152608401610349565b61102788856111e7565b505050985098509895505050505050565b611045838383600161121d565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146110c257818110156110b357604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610349565b6110c28484848403600061121d565b50505050565b6001600160a01b0383166110f257604051634b637e8f60e11b815260006004820152602401610349565b6001600160a01b03821661111c5760405163ec442f0560e01b815260006004820152602401610349565b6110458383836112f2565b6001600160a01b03821661115157604051634b637e8f60e11b815260006004820152602401610349565b61115d826000836112f2565b5050565b600060038211156111c2575080600061117b60028361172b565b611186906001611718565b90505b818110156111bc579050806002816111a1818661172b565b6111ab9190611718565b6111b5919061172b565b9050611189565b50919050565b81156111cc575060015b919050565b60008183106111e05781610a27565b5090919050565b6001600160a01b0382166112115760405163ec442f0560e01b815260006004820152602401610349565b61115d600083836112f2565b6001600160a01b0384166112475760405163e602df0560e01b815260006004820152602401610349565b6001600160a01b03831661127157604051634a1406b160e11b815260006004820152602401610349565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156110c257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516112e491815260200190565b60405180910390a350505050565b6001600160a01b03831661131d5780600260008282546113129190611718565b9091555061138f9050565b6001600160a01b038316600090815260208190526040902054818110156113705760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610349565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166113ab576002805482900390556113ca565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161140f91815260200190565b60405180910390a3505050565b60008060006060848603121561143157600080fd5b505081359360208301359350604090920135919050565b602081526000825180602084015260005b818110156114765760208186018101516040868401015201611459565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146111cc57600080fd5b600080604083850312156114c057600080fd5b6114c983611496565b946020939093013593505050565b6000806000606084860312156114ec57600080fd5b6114f584611496565b925061150360208501611496565b929592945050506040919091013590565b60008060008060008060a0878903121561152d57600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561155257600080fd5b8701601f8101891361156357600080fd5b803567ffffffffffffffff81111561157a57600080fd5b8960208260051b840101111561158f57600080fd5b602091909101945092506115a560608801611496565b95989497509295919493608090920135925050565b6000602082840312156115cc57600080fd5b610a2782611496565b600080604083850312156115e857600080fd5b6115f183611496565b91506115ff60208401611496565b90509250929050565b600080600080600080600060e0888a03121561162357600080fd5b61162c88611496565b965061163a60208901611496565b955060408801359450606088013593506080880135925061165d60a08901611496565b96999598509396929591949193505060c09091013590565b600080600080600080600080610100898b03121561169257600080fd5b61169b89611496565b97506116a960208a01611496565b965060408901359550606089013594506080890135935060a089013592506116d360c08a01611496565b979a969950949793969295919450919260e001359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104ad576104ad6116eb565b808201808211156104ad576104ad6116eb565b60008261174857634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061176157607f821691505b6020821081036111bc57634e487b7160e01b600052602260045260246000fd5b60208082526013908201527214da5b5c1b1954ddd85c0e8811561412549151606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117d657600080fd5b81518015158114610a2757600080fd5b818103818111156104ad576104ad6116eb565b6020808252601a908201527f53696d706c65537761703a20494e56414c49445f544f4b454e53000000000000604082015260600190565b60208082526021908201527f53696d706c65537761703a20494e53554646494349454e545f415f414d4f554e6040820152601560fa1b606082015260800190565b60208082526021908201527f53696d706c65537761703a20494e53554646494349454e545f425f414d4f554e6040820152601560fa1b60608201526080019056fea2646970667358221220827333180314c3a720d012f12a9b799397cac30782381f6cfb3cf4b46ebad6c464736f6c634300081b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80635f64b55b116100a2578063ac41865a11610071578063ac41865a14610243578063baa2abde14610256578063dc5fa6c51461027e578063dd62ed3e14610287578063e8e33700146102c057600080fd5b80635f64b55b146101ec57806370a08231146101ff57806395d89b4114610228578063a9059cbb1461023057600080fd5b806318160ddd116100e957806318160ddd146101a457806319e36f3b146101ac57806323b872dd146101b5578063313ce567146101c857806338ed1739146101d757600080fd5b8063054d50d41461011b57806306fdde0314610141578063095ea7b3146101565780630fc63d1014610179575b600080fd5b61012e61012936600461141c565b6102ee565b6040519081526020015b60405180910390f35b610149610407565b6040516101389190611448565b6101696101643660046114ad565b610499565b6040519015158152602001610138565b60055461018c906001600160a01b031681565b6040516001600160a01b039091168152602001610138565b60025461012e565b61012e60085481565b6101696101c33660046114d7565b6104b3565b60405160128152602001610138565b6101ea6101e5366004611514565b6104d7565b005b60065461018c906001600160a01b031681565b61012e61020d3660046115ba565b6001600160a01b031660009081526020819052604090205490565b61014961094d565b61016961023e3660046114ad565b61095c565b61012e6102513660046115d5565b61096a565b610269610264366004611608565b610a2e565b60408051928352602083019190915201610138565b61012e60075481565b61012e6102953660046115d5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6102d36102ce366004611675565b610cc9565b60408051938452602084019290925290820152606001610138565b60008084116103525760405162461bcd60e51b815260206004820152602560248201527f53696d706c65537761703a20494e53554646494349454e545f494e5055545f416044820152641353d5539560da1b60648201526084015b60405180910390fd5b6000831180156103625750600082115b6103b95760405162461bcd60e51b815260206004820152602260248201527f53696d706c65537761703a20494e53554646494349454e545f4c495155494449604482015261545960f01b6064820152608401610349565b60006103c7856103e5611701565b905060006103d58483611701565b90506000826103e6876103e8611701565b6103f09190611718565b90506103fc818361172b565b979650505050505050565b6060600380546104169061174d565b80601f01602080910402602001604051908101604052809291908181526020018280546104429061174d565b801561048f5780601f106104645761010080835404028352916020019161048f565b820191906000526020600020905b81548152906001019060200180831161047257829003601f168201915b5050505050905090565b6000336104a7818585611038565b60019150505b92915050565b6000336104c185828561104a565b6104cc8585856110c8565b506001949350505050565b428110156104f75760405162461bcd60e51b815260040161034990611781565b600283146105425760405162461bcd60e51b81526020600482015260186024820152770a6d2dae0d8caa6eec2e07440929cac82989288bea082a8960431b6044820152606401610349565b6005546001600160a01b0316848460008161055f5761055f6117ae565b905060200201602081019061057491906115ba565b6001600160a01b03161480156105c457506006546001600160a01b0316848460018181106105a4576105a46117ae565b90506020020160208101906105b991906115ba565b6001600160a01b0316145b8061064c57506006546001600160a01b031684846000816105e7576105e76117ae565b90506020020160208101906105fc91906115ba565b6001600160a01b031614801561064c57506005546001600160a01b03168484600181811061062c5761062c6117ae565b905060200201602081019061064191906115ba565b6001600160a01b0316145b6106935760405162461bcd60e51b81526020600482015260186024820152770a6d2dae0d8caa6eec2e07440929cac82989288bea082a8960431b6044820152606401610349565b60055460009081906001600160a01b0316868683816106b4576106b46117ae565b90506020020160208101906106c991906115ba565b6001600160a01b0316146106e2576008546007546106e9565b6007546008545b9150915060006106fa8984846102ee565b90508781101561075b5760405162461bcd60e51b815260206004820152602660248201527f53696d706c65537761703a20494e53554646494349454e545f4f55545055545f604482015265105353d5539560d21b6064820152608401610349565b8686600081811061076e5761076e6117ae565b905060200201602081019061078391906115ba565b6040516323b872dd60e01b8152336004820152306024820152604481018b90526001600160a01b0391909116906323b872dd906064016020604051808303816000875af11580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc91906117c4565b506005546001600160a01b0316878760008161081a5761081a6117ae565b905060200201602081019061082f91906115ba565b6001600160a01b03160361087357886007600082825461084f9190611718565b92505081905550806008600082825461086891906117e6565b909155506108a49050565b88600860008282546108859190611718565b92505081905550806007600082825461089e91906117e6565b90915550505b868660018181106108b7576108b76117ae565b90506020020160208101906108cc91906115ba565b60405163a9059cbb60e01b81526001600160a01b03878116600483015260248201849052919091169063a9059cbb906044016020604051808303816000875af115801561091d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094191906117c4565b50505050505050505050565b6060600480546104169061174d565b6000336104a78185856110c8565b6005546000906001600160a01b03848116911614801561099757506006546001600160a01b038381169116145b6109b35760405162461bcd60e51b8152600401610349906117f9565b600060075411610a055760405162461bcd60e51b815260206004820152601b60248201527f53696d706c65537761703a20494e56414c49445f5245534552564500000000006044820152606401610349565b600754600854610a1d90670de0b6b3a7640000611701565b610a27919061172b565b9392505050565b60008042831015610a515760405162461bcd60e51b815260040161034990611781565b6005546001600160a01b038a81169116148015610a7b57506006546001600160a01b038981169116145b610a975760405162461bcd60e51b8152600401610349906117f9565b33600090815260208190526040902054871115610b075760405162461bcd60e51b815260206004820152602860248201527f53696d706c65537761703a20494e53554646494349454e545f4c505f544f4b456044820152671397d0955493915160c21b6064820152608401610349565b6000806000600754600854610b1b60025490565b9194509250905080610b2d848c611701565b610b37919061172b565b945080610b44838c611701565b610b4e919061172b565b935088851015610b705760405162461bcd60e51b815260040161034990611830565b87841015610b905760405162461bcd60e51b815260040161034990611871565b610b9a338b611127565b8460076000828254610bac91906117e6565b925050819055508360086000828254610bc591906117e6565b909155505060055460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018890529091169063a9059cbb906044016020604051808303816000875af1158015610c1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4191906117c4565b5060065460405163a9059cbb60e01b81526001600160a01b038981166004830152602482018790529091169063a9059cbb906044016020604051808303816000875af1158015610c95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb991906117c4565b5050505097509795505050505050565b600080600042841015610cee5760405162461bcd60e51b815260040161034990611781565b6005546001600160a01b0316158015610d1057506006546001600160a01b0316155b15610d4657600580546001600160a01b03808e166001600160a01b03199283161790925560068054928d16929091169190911790555b6005546001600160a01b038c81169116148015610d7057506006546001600160a01b038b81169116145b610d8c5760405162461bcd60e51b8152600401610349906117f9565b60075460085481158015610d9e575080155b15610dae578a9450899350610e3a565b600082610dbb838e611701565b610dc5919061172b565b90508a8111610df95788811015610dee5760405162461bcd60e51b815260040161034990611871565b8b9550809450610e38565b600082610e06858e611701565b610e10919061172b565b90508a811015610e325760405162461bcd60e51b815260040161034990611830565b95508a94505b505b6005546040516323b872dd60e01b8152336004820152306024820152604481018790526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610e91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb591906117c4565b506006546040516323b872dd60e01b8152336004820152306024820152604481018690526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610f0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3191906117c4565b508460076000828254610f449190611718565b925050819055508360086000828254610f5d9190611718565b909155505060025480600003610f8657610f7f610f7a8688611701565b611161565b9350610fbb565b610fb883610f948389611701565b610f9e919061172b565b83610fa98489611701565b610fb3919061172b565b6111d1565b93505b6000841161101d5760405162461bcd60e51b815260206004820152602960248201527f53696d706c65537761703a20494e53554646494349454e545f4c495155494449604482015268151657d3525395115160ba1b6064820152608401610349565b61102788856111e7565b505050985098509895505050505050565b611045838383600161121d565b505050565b6001600160a01b0383811660009081526001602090815260408083209386168352929052205460001981146110c257818110156110b357604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610349565b6110c28484848403600061121d565b50505050565b6001600160a01b0383166110f257604051634b637e8f60e11b815260006004820152602401610349565b6001600160a01b03821661111c5760405163ec442f0560e01b815260006004820152602401610349565b6110458383836112f2565b6001600160a01b03821661115157604051634b637e8f60e11b815260006004820152602401610349565b61115d826000836112f2565b5050565b600060038211156111c2575080600061117b60028361172b565b611186906001611718565b90505b818110156111bc579050806002816111a1818661172b565b6111ab9190611718565b6111b5919061172b565b9050611189565b50919050565b81156111cc575060015b919050565b60008183106111e05781610a27565b5090919050565b6001600160a01b0382166112115760405163ec442f0560e01b815260006004820152602401610349565b61115d600083836112f2565b6001600160a01b0384166112475760405163e602df0560e01b815260006004820152602401610349565b6001600160a01b03831661127157604051634a1406b160e11b815260006004820152602401610349565b6001600160a01b03808516600090815260016020908152604080832093871683529290522082905580156110c257826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516112e491815260200190565b60405180910390a350505050565b6001600160a01b03831661131d5780600260008282546113129190611718565b9091555061138f9050565b6001600160a01b038316600090815260208190526040902054818110156113705760405163391434e360e21b81526001600160a01b03851660048201526024810182905260448101839052606401610349565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b0382166113ab576002805482900390556113ca565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161140f91815260200190565b60405180910390a3505050565b60008060006060848603121561143157600080fd5b505081359360208301359350604090920135919050565b602081526000825180602084015260005b818110156114765760208186018101516040868401015201611459565b506000604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b03811681146111cc57600080fd5b600080604083850312156114c057600080fd5b6114c983611496565b946020939093013593505050565b6000806000606084860312156114ec57600080fd5b6114f584611496565b925061150360208501611496565b929592945050506040919091013590565b60008060008060008060a0878903121561152d57600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561155257600080fd5b8701601f8101891361156357600080fd5b803567ffffffffffffffff81111561157a57600080fd5b8960208260051b840101111561158f57600080fd5b602091909101945092506115a560608801611496565b95989497509295919493608090920135925050565b6000602082840312156115cc57600080fd5b610a2782611496565b600080604083850312156115e857600080fd5b6115f183611496565b91506115ff60208401611496565b90509250929050565b600080600080600080600060e0888a03121561162357600080fd5b61162c88611496565b965061163a60208901611496565b955060408801359450606088013593506080880135925061165d60a08901611496565b96999598509396929591949193505060c09091013590565b600080600080600080600080610100898b03121561169257600080fd5b61169b89611496565b97506116a960208a01611496565b965060408901359550606089013594506080890135935060a089013592506116d360c08a01611496565b979a969950949793969295919450919260e001359150565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176104ad576104ad6116eb565b808201808211156104ad576104ad6116eb565b60008261174857634e487b7160e01b600052601260045260246000fd5b500490565b600181811c9082168061176157607f821691505b6020821081036111bc57634e487b7160e01b600052602260045260246000fd5b60208082526013908201527214da5b5c1b1954ddd85c0e8811561412549151606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117d657600080fd5b81518015158114610a2757600080fd5b818103818111156104ad576104ad6116eb565b6020808252601a908201527f53696d706c65537761703a20494e56414c49445f544f4b454e53000000000000604082015260600190565b60208082526021908201527f53696d706c65537761703a20494e53554646494349454e545f415f414d4f554e6040820152601560fa1b606082015260800190565b60208082526021908201527f53696d706c65537761703a20494e53554646494349454e545f425f414d4f554e6040820152601560fa1b60608201526080019056fea2646970667358221220827333180314c3a720d012f12a9b799397cac30782381f6cfb3cf4b46ebad6c464736f6c634300081b0033",
  "devdoc": {
    "author": "Gasquez_Jonatan",
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "details": "If the pool is empty, the initial token ratio is set. Otherwise, liquidity is added based on the existing ratio. Mints LP tokens to the provider.",
        "params": {
          "_tokenA": "The address of tokenA.",
          "_tokenB": "The address of tokenB.",
          "amountADesired": "The amount of tokenA the user wishes to add.",
          "amountAMin": "The minimum amount of tokenA to add, for slippage protection.",
          "amountBDesired": "The amount of tokenB the user wishes to add.",
          "amountBMin": "The minimum amount of tokenB to add, for slippage protection.",
          "deadline": "The timestamp after which the transaction will be reverted.",
          "to": "The address that will receive the LP tokens."
        },
        "returns": {
          "amountA": "The actual amount of tokenA added.",
          "amountB": "The actual amount of tokenB added.",
          "liquidity": "The amount of LP tokens minted."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "details": "Applies a 0.3% fee to the input amount before calculation.",
        "params": {
          "_reserveIn": "The reserve of the input token in the pool.",
          "_reserveOut": "The reserve of the output token in the pool.",
          "amountIn": "The amount of the input token."
        },
        "returns": {
          "amountOut": "The calculated amount of the output token."
        }
      },
      "getPrice(address,address)": {
        "params": {
          "_tokenA": "The address of tokenA.",
          "_tokenB": "The address of tokenB."
        },
        "returns": {
          "price": "The price of tokenA denominated in tokenB, scaled by 1e18."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "details": "Burns the user's LP tokens and sends them a proportional amount of tokenA and tokenB from the reserves.",
        "params": {
          "_tokenA": "The address of tokenA.",
          "_tokenB": "The address of tokenB.",
          "amountAMin": "The minimum amount of tokenA to receive, for slippage protection.",
          "amountBMin": "The minimum amount of tokenB to receive, for slippage protection.",
          "deadline": "The timestamp after which the transaction will be reverted.",
          "liquidity": "The amount of LP tokens to burn.",
          "to": "The address that will receive the underlying tokens."
        },
        "returns": {
          "amountA": "The actual amount of tokenA sent to the user.",
          "amountB": "The actual amount of tokenB sent to the user."
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "params": {
          "amountIn": "The exact amount of the input token to send.",
          "amountOutMin": "The minimum amount of the output token to receive, for slippage protection.",
          "deadline": "The timestamp after which the transaction will be reverted.",
          "path": "An array of token addresses representing the swap route. Must be 2 addresses.",
          "to": "The address that will receive the output tokens."
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
      }
    },
    "title": "SimpleSwap",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Adds liquidity to the pool for a pair of tokens."
      },
      "constructor": {
        "notice": "Initializes the contract, setting the name and symbol for the LP token."
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "notice": "Calculates the amount of an output token to receive for a given amount of an input token."
      },
      "getPrice(address,address)": {
        "notice": "Calculates the price of tokenA in terms of tokenB."
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Removes liquidity from the pool."
      },
      "reserveA()": {
        "notice": "The total reserve of tokenA held by this contract."
      },
      "reserveB()": {
        "notice": "The total reserve of tokenB held by this contract."
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of an input token for as much as possible of an output token."
      },
      "tokenA()": {
        "notice": "The address of the first token in the liquidity pool."
      },
      "tokenB()": {
        "notice": "The address of the second token in the liquidity pool."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 165,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 167,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 169,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 171,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 796,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "tokenA",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 800,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "tokenB",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IERC20)729"
      },
      {
        "astId": 803,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "reserveA",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 806,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "reserveB",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)729": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}